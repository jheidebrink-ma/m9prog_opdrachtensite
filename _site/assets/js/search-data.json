{"0": {
    "doc": "Les 7",
    "title": "Wat is een custom post type?",
    "content": "Een post type in WordPress kun je zien als een speciaal onderdeel, standaard post types zijn: post, page, user, media. Custom Post Types zijn post types die je zelf aan WordPress toevoegt omdat je extra functionaliteit of een onderscheid nodig hebt. Zorg dat je deze introductie even rustig doorleest zodat je snapt hoe WordPress omgaat met de post types. Wat zijn custom post types binnen WordPress? . Eerst krijg je een uitleg over de normale post types, zodat je het concept post type beter gaat begrijpen. Post types zijn onderdelen binnen WordPress om verschillende soorten content te categoriseren. De twee bekendste ken je al: berichten ( posts ) en pagina’s ( pages ). Er zijn nog een aantal andere post types, maar die gaan wij nu niet behandelen. Meer informatie over post types: https://wordpress.org/documentation/article/what-is-post-type/ Custom post types zijn speciale onderdelen die je binnen jouw site wilt gebruiken. Wanneer gebruik je een custom post type? . Het antwoord is: elke keer wanneer je content toevoegt aan je website die niet in één van de standaard post types past. Een paar voorbeelden: . | products ( producten van een webshop ) | projects ( projecten op een portfolio-website ) | events ( evenementen voor een boekingswebsite ) In mijn hout website maak ik een post type wood, dit zijn straks onderdelen die een aantal unieke eigenschappen krijgen. Bedenk ondertussen wat voor een post type jij nodig hebt in jouw project. | . Custom taxonomieën . Taxonomieën worden bij WordPress gebruikt om post types te categoriseren. Zo kun je later eenvoudig gaan filteren op een bepaalde taxonomie. Voor standaard berichten zijn de twee gebruikte taxonomieën categorieën en tags. Wanneer je een custom post type registreert, kunt je kiezen om een bestaande taxonomie eraan toe te wijzen. Je kunt ook volledig nieuwe taxonomie aanmaken voor je custom post type. Ik ga in mijn voorbeeld ‘origin’ als taxonomie waar ik het land in van oorsprong in opsla. Volgende stap: . Registreren van een post type . ",
    "url": "/m9prog_opdrachtensite/les-7/about#wat-is-een-custom-post-type",
    
    "relUrl": "/les-7/about#wat-is-een-custom-post-type"
  },"1": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-7/about",
    
    "relUrl": "/les-7/about"
  },"2": {
    "doc": "Les 2",
    "title": "Verschillende type cache",
    "content": "Als developer loop je tegen verschillende type cache aan. Deze verschillende soorten caching worden gebruikt om de prestaties van een website of applicatie te verbeteren. Hier bespreek ik de belangrijkste types en hoe je deze geforceerd kunt legen. 1- Server-side Cache . Op de server wordt de gegenereerde informatie voor een bepaalde tijd opgeslagen. Hierdoor hoeft de server niet steeds dezelfde gegevens opnieuw te berekenen of ophalen uit de database. Dit kan een full-pagina-cache ( HTML ) of een object-cache ( gedeelte van een web pagina ) Geforceerd legen . | via een deploy ( komt later ) | via een cli script zoals: php artisan cache:clear | . 2- Database Cache . Als je meerdere keren een database query uitvoert zal het resultaat opgeslagen worden op de database server om de server te ontlasten. Geforceerd legen . | met de mysql query: RESET QUERY CACHE; | . 3- Browser Cache . De browser slaat bestanden zoals afbeeldingen, CSS en JavaScript lokaal op de computer van de gebruiker op. Dit zorgt ervoor dat bij een volgend bezoek dezelfde bestanden niet opnieuw van de server hoeven te worden gedownload, wat de laadtijd versnelt. Dit is de belangrijkste cache, maar ook de vervelendste. Om ervoor te zorgen dat je een nieuwe versie van bijvoorbeeld de css moet laden kun je de cache legen in de browser, maar dit kun je je klanten niet laten doen. Daarom moet je tegen de browser vertellen dat je een nieuwe versie wilt laden, door bijvoorbeeld een variabele toe te voegen achter de url: ?v=VERSION_NUMBER Door VERSION_NUMBER te vervangen door een nieuw nummmer zal de browser zien dat er een ander bestand geladen moet worden. Je kunt in je thema het versie nummer van WordPress overschrijven om zo zelf controle te hebben over de versies met het volgende filter: Voor nu kun je jouw css te laden door een nieuw filter aan te maken: . /** * Replace WP version with custom version number * * @param $src * * @return string */ public function filter_custom_version( $src ) { if ( strpos( $src, 'ver=' ) ) { $src = remove_query_arg( 'ver', $src ); $src .= '?ver=' . D_VERSION; } return $src; } add_filter( 'the_generator', [ $this, 'filter_custom_version' ] ); . Let op: Ik heb ergens anders de constante D_VERSION gedefinieerd, die is noodzakelijk in deze code. ",
    "url": "/m9prog_opdrachtensite/les-2/cache#verschillende-type-cache",
    
    "relUrl": "/les-2/cache#verschillende-type-cache"
  },"3": {
    "doc": "Les 2",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m9prog_opdrachtensite/les-2/cache#commit-en-push",
    
    "relUrl": "/les-2/cache#commit-en-push"
  },"4": {
    "doc": "Les 2",
    "title": "Les 2",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/cache",
    
    "relUrl": "/les-2/cache"
  },"5": {
    "doc": "Les 3",
    "title": "Activeer en controleer",
    "content": "Je hebt nu een eerste stuk van je custom thema ontwikkeld. Activeer je nieuwe thema in de wp-admin omgeving en controleer het thema aan de voorkant van de website. 1- Activeer . Ga nu weer naar het wp-admin gedeelte van je website en selecteer jouw nieuwe thema. 2- Controleer . Klik nu op je website naam ( huisje icoon links boven ) en ga naar je website. Als het goed is zie je nu alleen maar jouw debug tekst uit je index.php . ",
    "url": "/m9prog_opdrachtensite/les-3/check#activeer-en-controleer",
    
    "relUrl": "/les-3/check#activeer-en-controleer"
  },"6": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-3/check",
    
    "relUrl": "/les-3/check"
  },"7": {
    "doc": "Les 2",
    "title": "Compiler",
    "content": "Voor het compilen van je sass bestanden kun je gebruik maken van verschillende compilers. Dit zijn een paar voorbeelden in volgorde van populariteit bij grote bedrijven: . | Yarn | NPM JS Compiler | Grunt JS | Integrated development environment (IDE) | . 1- Keuze voor compiler . Op basis van je framework keuze moet je een compiler gebruiken. Volg de stappen zoals beschreven bij de installatie van je framework. 2- Test en controleer . Test en controleer je framework en compiler. ALs je een aanpassing in het design maakt dan zou dit nu zichtbaar moeten zijn in de browser. 3- Pas het thema aan . Pas het thema zo aan dat je een design hebt dat bij jouw wensen past. 4- Controleer . Bekijk de website in je browser en zie dat het nieuwe thema actief is. Controleer ook even in een privé-venster waarbij je niet bent ingelogd. ",
    "url": "/m9prog_opdrachtensite/les-2/compiler#compiler",
    
    "relUrl": "/les-2/compiler#compiler"
  },"8": {
    "doc": "Les 2",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . Cache . ",
    "url": "/m9prog_opdrachtensite/les-2/compiler#commit-en-push",
    
    "relUrl": "/les-2/compiler#commit-en-push"
  },"9": {
    "doc": "Les 2",
    "title": "Les 2",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/compiler",
    
    "relUrl": "/les-2/compiler"
  },"10": {
    "doc": "Les 4",
    "title": "WordPress footer template en functies",
    "content": "Je gaat nu de footer.php instellen zodat alle pagina’s dezelfde HTML vormgeving en functionaliteit hebben. 1- Footer document aanmaken . Maak een nieuw document in je thema folder en met de naam: footer.php . 2- Footer implementeren in de index.php . In de index.php moet je nu de footer importeren onderaan het bestand. Doe dit door de php functie te gebruiken zoals je op de introductie pagina hebt gelezen. 3- Footer.php instellen . | Zorg er nu voor dat je de &lt;body&gt; en &lt;html&gt; tags afsluit in de footer.php. | Plaats boven het afsluiten van de body de volgende code: &lt;?php wp_footer() ?&gt; | Voeg een tekstje toe zodat je straks weet waar de footer op je pagina verschijnt. | . Het resultaat van je website ziet er nu mogelijk zo uit: . ",
    "url": "/m9prog_opdrachtensite/les-4/footer#wordpress-footer-template-en-functies",
    
    "relUrl": "/les-4/footer#wordpress-footer-template-en-functies"
  },"11": {
    "doc": "Les 4",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . HTML structuur . ",
    "url": "/m9prog_opdrachtensite/les-4/footer#commit-en-push",
    
    "relUrl": "/les-4/footer#commit-en-push"
  },"12": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-4/footer",
    
    "relUrl": "/les-4/footer"
  },"13": {
    "doc": "CSS frameworks",
    "title": "css frameworks",
    "content": "A overview of the most used css frameworks in 2024. ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#css-frameworks",
    
    "relUrl": "/les-2/frameworks#css-frameworks"
  },"14": {
    "doc": "CSS frameworks",
    "title": "General-Purpose CSS Frameworks",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#general-purpose-css-frameworks",
    
    "relUrl": "/les-2/frameworks#general-purpose-css-frameworks"
  },"15": {
    "doc": "CSS frameworks",
    "title": "1. Bootstrap",
    "content": "Bootstrap might be the most popular and well-known CSS framework in the world. And while our list includes many alternatives to Bootstrap, you can’t go wrong with this CSS framework designed by Twitter, as it provides a comprehensive set of tools and assets for designing web applications. As one of the best CSS libraries, Bootstrap offers a consistent and tested codebase you can rely on for consistent results. The trade-off is that it leaves little room for flexibility. Bootstrap classes help front-end developers quickly add styling to their HTML code. Bootstrap is also well-documented, making it easy to find resources. It’s one of the most popular CSS frameworks and has a large and active online community of users. We also found an 11-hour Bootstrap course for beginners. Pros . | Large community and support | Built with accessibility in mind | Supports both SASS and LESS | . Cons . | Lack of design flexibility | Large file sizes with increased download times | Overreliance on classes | Compatibility issues with older browser versions | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#1-bootstrap",
    
    "relUrl": "/les-2/frameworks#1-bootstrap"
  },"16": {
    "doc": "CSS frameworks",
    "title": "2. Bulma",
    "content": "Bulma is a free and open-source CSS framework based on Flexbox. It was created to provide a modern, minimalist alternative to other CSS frameworks. Instead of using classes for styling and layout, Bulma uses a modular approach. And this allows developers to create custom designs without writing much CSS code. Bulma also has a strict CSS-only approach and includes no JavaScript components. Bulma’s modular design makes it more flexible. You can easily customize it to suit your specific needs for a project. It’s also designed for cross-browser compatibility. And it’s also lightweight, fast, and optimized for performance. Pros . | Highly flexible and customizable | Lightweight and fast | Classless and modular design | . Cons . | Smaller community of developers | Steep learning curve for those new to Flexbox | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#2-bulma",
    
    "relUrl": "/les-2/frameworks#2-bulma"
  },"17": {
    "doc": "CSS frameworks",
    "title": "3. Foundation",
    "content": "Foundation is a responsive front-end framework that provides a set of CSS tools focusing on mobile-first design and accessibility. Foundation includes a range of JavaScript plugins for adding interactivity to your web applications. Compared to other CSS frameworks, Foundation offers more control to developers for customizations. While this is a good thing, it also means newcomers will find it slightly complex and take a while before getting used to it. Pros . | Creators offer training/consulting for enterprises | High degree of flexibility | Has a command-line interface (CLI) | Includes an advanced responsive image system | . Cons . | Steep learning curve | Can be complex for beginners | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#3-foundation",
    
    "relUrl": "/les-2/frameworks#3-foundation"
  },"18": {
    "doc": "CSS frameworks",
    "title": "Utility-Based CSS Frameworks",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#utility-based-css-frameworks",
    
    "relUrl": "/les-2/frameworks#utility-based-css-frameworks"
  },"19": {
    "doc": "CSS frameworks",
    "title": "1. Tailwind",
    "content": "Tailwind is a modern, utility-first, and un-opinionated framework that’s widely viewed as one of the top CSS frameworks available. As possibly the best CSS library for beginners, Tailwind provides a set of pre-defined CSS classes to apply to HTML elements, allowing front-end developers to quickly build custom interfaces with a focus on speed and efficiency. Tailwind gives developers more control over the look and feel of their websites. Whether you’re a seasoned web designer or a beginner, Tailwind is a great tool to help you build a high-quality, responsive, and accessible website quickly. Pros . | Focuses on developer productivity | Highly customizable | Focuses on accessibility | . Cons . | Over-reliance on utility classes | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#1-tailwind",
    
    "relUrl": "/les-2/frameworks#1-tailwind"
  },"20": {
    "doc": "CSS frameworks",
    "title": "2. Open Props",
    "content": "Open Props is one of the few CSS libraries that’s non-prescriptive. It provides customizable design options for front-end developers to create websites quickly and efficiently. Unlike many CSS frameworks/libraries, Open props allow developers to create custom classes instead of strictly using predefined class names. Pros . | Highly flexible and customizable | It’s incrementally adoptable | . Cons . | Smaller community of developers | Limited documentation | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#2-open-props",
    
    "relUrl": "/les-2/frameworks#2-open-props"
  },"21": {
    "doc": "CSS frameworks",
    "title": "Lightweight CSS Frameworks",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#lightweight-css-frameworks",
    
    "relUrl": "/les-2/frameworks#lightweight-css-frameworks"
  },"22": {
    "doc": "CSS frameworks",
    "title": "1. Pure",
    "content": "Pure is a minimalist CSS framework that provides a small set of basic styles for common HTML elements like buttons, forms, tables, etc. It’s designed to be a place for developers to begin when styling websites. This framework is designed to reduce the amount of CSS code required for styling your web applications, making it easier for developers and designers to understand and modify. Pros . | It’s lightweight | Has a minimalist design | Highly customizable | . Cons . | Limited JavaScript support | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#1-pure",
    
    "relUrl": "/les-2/frameworks#1-pure"
  },"23": {
    "doc": "CSS frameworks",
    "title": "2. Spectre",
    "content": "Spectre is a modern CSS framework that utilizes the latest CSS technologies, such as Flexbox and CSS grid, making it suitable for building responsive and modern websites. Its minimal and customizable design makes it a great choice when you want to quickly prototype and build a website without having to start from scratch. Spectre is well-documented and includes examples and usage guidelines, making it easy to start. Pros . | Compatible with older browsers | Supports both SASS and LESS preprocessing | . Cons . | Limited community support | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#2-spectre",
    
    "relUrl": "/les-2/frameworks#2-spectre"
  },"24": {
    "doc": "CSS frameworks",
    "title": "3.Skeleton",
    "content": "One of the key features of Skeleton is its minimalism, which allows developers to start with a clean slate and avoid the usual clutter and bloat of larger CSS frameworks. It also focuses on mobile-first design. Overall, it’s a good choice for developers who want to create custom and responsive designs without the hassle of working around already-styled components. Pros . | Very lightweight and fast | Clean and elegant design | . Cons . | Not many pre-styled components | Class-Less CSS Frameworks | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#3skeleton",
    
    "relUrl": "/les-2/frameworks#3skeleton"
  },"25": {
    "doc": "CSS frameworks",
    "title": "4. Water",
    "content": "This CSS framework is based on minimalistic design principles, providing only the bare essentials to style your web pages. It’s easy to add to any of your projects, as you only need to copy one line of code into your HTML file. It’s also lightweight, fast-loading, and designed to make simple static websites more visually appealing. Pros . | Easy to use | Lightweight and fast | . Cons . | Not ideal for large, complex projects | Limited customization option | . ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#4-water",
    
    "relUrl": "/les-2/frameworks#4-water"
  },"26": {
    "doc": "CSS frameworks",
    "title": "Conclusion",
    "content": "What Is the Easiest CSS Framework to Learn? . Even the best CSS framework can be challenging without a decent understanding of vanilla CSS. With that said, if you have basic CSS skills, check out Bootstrap or Tailwind, as these are two of the most widely used and well-documented CSS frameworks in 2024. ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks#conclusion",
    
    "relUrl": "/les-2/frameworks#conclusion"
  },"27": {
    "doc": "CSS frameworks",
    "title": "CSS frameworks",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/frameworks",
    
    "relUrl": "/les-2/frameworks"
  },"28": {
    "doc": "Les 2",
    "title": "Front-end Framework",
    "content": "Voor jouw custom blog kun je goed gebruik maken van een front-end framework zodat je je kan richten op het design en functionaliteit en niet het wiel met bijvoorbeeld responsive opnieuw moet uitvinden. 1- Selecteer een framework dat je wilt gebruiken . Bekijk hier welk framework het beste bij jou past: framework . Volgende stap: . NPM Compilers . ",
    "url": "/m9prog_opdrachtensite/les-2/frontend#front-end-framework",
    
    "relUrl": "/les-2/frontend#front-end-framework"
  },"29": {
    "doc": "Les 2",
    "title": "Les 2",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/frontend",
    
    "relUrl": "/les-2/frontend"
  },"30": {
    "doc": "Les 4",
    "title": "WordPress header template en functies",
    "content": "Je gaat nu de header.php instellen zodat alle pagina’s dezelfde HTML vormgeving en functionaliteit hebben. De vormgeving zal minimaal zijn, volgende les gaan we daar mee aan de slag. 1- Header document aanmaken . Maak een nieuw document in je thema folder en met de naam: header.php . 2- Header implementeren in de index.php . In de index.php moet je nu boven in het bestand ( op regel 1 ) de header importeren. Doe dit door de php functie te gebruiken zoals je op de vorige pagina hebt gelezen. 3- Header.php instellen . Zorg er nu voor dat je net zoals in het header.php voorbeeld een HTML pagina opent. De volgende tags moet je minimaal in dit document plaatsen, afsluiten van de html en body doe je in de footer. Maar mogelijk moet je ook een titel toevoegen. &lt;!doctype html&gt; &lt;html &lt;?php language_attributes() ?&gt;&gt; &lt;head&gt; &lt;meta charset=\"&lt;?php bloginfo( 'charset' ) ?&gt;\" /&gt; &lt;?php wp_head() ?&gt; &lt;/head&gt; &lt;body &lt;?php body_class() ?&gt;&gt; &lt;?php wp_body_open() ?&gt; . ",
    "url": "/m9prog_opdrachtensite/les-4/header#wordpress-header-template-en-functies",
    
    "relUrl": "/les-4/header#wordpress-header-template-en-functies"
  },"31": {
    "doc": "Les 4",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . WordPress footer template en functies . ",
    "url": "/m9prog_opdrachtensite/les-4/header#commit-en-push",
    
    "relUrl": "/les-4/header#commit-en-push"
  },"32": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-4/header",
    
    "relUrl": "/les-4/header"
  },"33": {
    "doc": "Les 4",
    "title": "De HTML pagina structuur",
    "content": "Het is nu tijd om de html pagina in te delen. Je kunt hiervoor gebruik maken van een standaard template van bijvoorbeeld Bootstrap of een ander systeem dat je hebt gekozen tijdens de eerste les. In dit voorbeeld behandel ik Bootstrap. Voor Bootstrap kun je later ook deze plugin gebruiken om meer functionaliteit toe te voegen: wp-bootstrap-blocks/ . In een volgende les gaan wij de vormgeving optimaliseren. Voor nu is de structuur belangrijk. . 1- HTML body . Hier kun je diverse Bootstrap voorbeelden vinden: Download Bootstrap Examples Ik gebruik voor nu het voorbeeld CDN-starter Bekijk hier de complete HTML pagina: index.html . In de index.php plaats ik de basis HTML stuctuur van de content. Alleen het body gedeelte plaats in ik de index.php. &lt;main class=\"container my-5\"&gt; &lt;h1 class=\"mt-5\"&gt;Dit is mijn eerste titel&lt;/h1&gt; &lt;div class=\"col-lg-8 px-0\"&gt; &lt;p class=\"fs-5\"&gt; Intro &lt;/p&gt; &lt;p&gt; Content &lt;/p&gt; &lt;/div&gt; &lt;/main&gt; . 2- HTML in de Header . Zoals je ziet in het HTML voorbeeld moet er ook in de header.php een stuk html toegevoegd worden. Deze code plaats ik in de head om bootstrap css te laden via een CDN: . &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\"&gt; . Daarnaast is een voorbeeld menu ook wel fijn, dat doe je door deze code te plaatsen: . &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt; &lt;div class=\"container\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Navbar&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt; &lt;ul class=\"navbar-nav me-auto mb-2 mb-lg-0\"&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link active\" aria-current=\"page\" href=\"#\"&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item dropdown\"&gt; &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt; Dropdown &lt;/a&gt; &lt;ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"&gt; &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt; &lt;hr class=\"dropdown-divider\"&gt; &lt;/li&gt; &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=\"d-flex\" role=\"search\"&gt; &lt;input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"&gt; &lt;button class=\"btn btn-outline-success\" type=\"submit\"&gt;Search&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; . 3- HTML in de footer . In de footer.php moet een javascript vanaf de CDN geladen gaat worden zodat bijvoorbeeld de dropdown gaat werken. Plaats deze onderaan in je footer, boven het afsluiten van de body en html. &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; . Om een footer element aan te maken plaats ik deze code in mijn footer: . &lt;footer class=\"footer mt-auto py-3 bg-body-tertiary\"&gt; &lt;div class=\"container\"&gt; &lt;span class=\"text-body-secondary\"&gt;Place footer content here.&lt;/span&gt; &lt;/div&gt; &lt;/footer&gt; . Vergeet niet om ook de html en body tag die je in de header hebt geopend af te sluiten in de footer. 4- Controleer . Bekijk je website nu in de browser, je hebt nu een complete website. ",
    "url": "/m9prog_opdrachtensite/les-4/html#de-html-pagina-structuur",
    
    "relUrl": "/les-4/html#de-html-pagina-structuur"
  },"34": {
    "doc": "Les 4",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m9prog_opdrachtensite/les-4/html#commit-en-push",
    
    "relUrl": "/les-4/html#commit-en-push"
  },"35": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-4/html",
    
    "relUrl": "/les-4/html"
  },"36": {
    "doc": "Home",
    "title": "WordPress - Home",
    "content": "Op deze website vind je de opdrachten voor de unit M5PROG waarbij wij een custom thema voor WordPress gaan ontwikkelen. ",
    "url": "/m9prog_opdrachtensite/#wordpress---home",
    
    "relUrl": "/#wordpress---home"
  },"37": {
    "doc": "Home",
    "title": "Opdrachten en uitleg",
    "content": " ",
    "url": "/m9prog_opdrachtensite/#opdrachten-en-uitleg",
    
    "relUrl": "/#opdrachten-en-uitleg"
  },"38": {
    "doc": "Home",
    "title": "Les 1:  Local development setup",
    "content": "Docker en structuur instellen, IDE inrichten voor gebruik met WordPress, localhost inclusief database starten . Start . ",
    "url": "/m9prog_opdrachtensite/#les-1--local-development-setup",
    
    "relUrl": "/#les-1--local-development-setup"
  },"39": {
    "doc": "Home",
    "title": "Les 2:  Custom theme",
    "content": "Deze les komt binnenkort online. Vanaf 17-09-2024 online . ",
    "url": "/m9prog_opdrachtensite/#les-2--custom-theme",
    
    "relUrl": "/#les-2--custom-theme"
  },"40": {
    "doc": "Home",
    "title": "Les 3:  Deployment",
    "content": "Deze les komt binnenkort online. Vanaf 24-09-2024 online . ",
    "url": "/m9prog_opdrachtensite/#les-3--deployment",
    
    "relUrl": "/#les-3--deployment"
  },"41": {
    "doc": "Home",
    "title": "Les 4:  Inloggen zonder admin account",
    "content": "Deze les komt binnenkort online. Vanaf 01-10-2024 online . ",
    "url": "/m9prog_opdrachtensite/#les-4--inloggen-zonder-admin-account",
    
    "relUrl": "/#les-4--inloggen-zonder-admin-account"
  },"42": {
    "doc": "Home",
    "title": "Les 5:  Plugin ontwikkelen",
    "content": "Deze les komt binnenkort online. Vanaf 08-10-2024 online . ",
    "url": "/m9prog_opdrachtensite/#les-5--plugin-ontwikkelen",
    
    "relUrl": "/#les-5--plugin-ontwikkelen"
  },"43": {
    "doc": "Home",
    "title": "Les 6:  Custom post types",
    "content": "Deze les komt binnenkort online. Vanaf 15-10-2024 online . ",
    "url": "/m9prog_opdrachtensite/#les-6--custom-post-types",
    
    "relUrl": "/#les-6--custom-post-types"
  },"44": {
    "doc": "Home",
    "title": "Les 7:  Testing",
    "content": "Deze les komt binnenkort online. Vanaf 22-10-2024 online . ",
    "url": "/m9prog_opdrachtensite/#les-7--testing",
    
    "relUrl": "/#les-7--testing"
  },"45": {
    "doc": "Home",
    "title": "Les 8:  Presentatie",
    "content": "Deze les komt binnenkort online. Vanaf 05-11-2024 online . ",
    "url": "/m9prog_opdrachtensite/#les-8--presentatie",
    
    "relUrl": "/#les-8--presentatie"
  },"46": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/m9prog_opdrachtensite/",
    
    "relUrl": "/"
  },"47": {
    "doc": "Les 7",
    "title": "Les 7 - Testing",
    "content": ". Hoe test je een website en implementeer je een test flow . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m9prog_opdrachtensite/les-7/index#les-7---testing",
    
    "relUrl": "/les-7/index#les-7---testing"
  },"48": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-7/index",
    
    "relUrl": "/les-7/index"
  },"49": {
    "doc": "Les 8",
    "title": "Les 8 - Presentatie",
    "content": ". Laatste les voor de afronding van dit project zodat je op stage kunt . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m9prog_opdrachtensite/les-8/index#les-8---presentatie",
    
    "relUrl": "/les-8/index#les-8---presentatie"
  },"50": {
    "doc": "Les 8",
    "title": "Les 8",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-8/index",
    
    "relUrl": "/les-8/index"
  },"51": {
    "doc": "Les 1",
    "title": "Les 1 - Local development setup",
    "content": ". Docker en structuur instellen, IDE inrichten voor gebruik met WordPress, localhost inclusief database starten . Maak de opdrachten voor deze les . | Start | Development omgeving opzetten | Initialiseren van WordPress | Testen | . ",
    "url": "/m9prog_opdrachtensite/les-1/#les-1---local-development-setup",
    
    "relUrl": "/les-1/#les-1---local-development-setup"
  },"52": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-1/",
    
    "relUrl": "/les-1/"
  },"53": {
    "doc": "Les 6",
    "title": "Les 6 - Custom post types",
    "content": ". Implementatie van custom portfolio type . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m9prog_opdrachtensite/les-6/index#les-6---custom-post-types",
    
    "relUrl": "/les-6/index#les-6---custom-post-types"
  },"54": {
    "doc": "Les 6",
    "title": "Les 6",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-6/index",
    
    "relUrl": "/les-6/index"
  },"55": {
    "doc": "Les 3",
    "title": "Les 3 - Deployment",
    "content": ". Keuze van hosting, deployment methodes, inrichten van hosting en CI/CD flow . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m9prog_opdrachtensite/les-3/index#les-3---deployment",
    
    "relUrl": "/les-3/index#les-3---deployment"
  },"56": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-3/index",
    
    "relUrl": "/les-3/index"
  },"57": {
    "doc": "Les 4",
    "title": "Les 4 - Inloggen zonder admin account",
    "content": ". Wat als je van je klant alleen ftp gegevens krijgt, hoe kom je dan bij de database en wp-admin . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m9prog_opdrachtensite/les-4/index#les-4---inloggen-zonder-admin-account",
    
    "relUrl": "/les-4/index#les-4---inloggen-zonder-admin-account"
  },"58": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-4/index",
    
    "relUrl": "/les-4/index"
  },"59": {
    "doc": "Les 5",
    "title": "Les 5 - Plugin ontwikkelen",
    "content": ". Maak een custom plugin om pagina’s af te schermen en mails te versturen bij updates . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m9prog_opdrachtensite/les-5/index#les-5---plugin-ontwikkelen",
    
    "relUrl": "/les-5/index#les-5---plugin-ontwikkelen"
  },"60": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-5/index",
    
    "relUrl": "/les-5/index"
  },"61": {
    "doc": "Les 2",
    "title": "Les 2 - Custom theme",
    "content": ". Welke front-end gebruik je, NPM Compilers instellen, Cache negeren in frontend en in php-fpm . Deze opdracht komt binnenkort beschikbaar. ",
    "url": "/m9prog_opdrachtensite/les-2/index#les-2---custom-theme",
    
    "relUrl": "/les-2/index#les-2---custom-theme"
  },"62": {
    "doc": "Les 2",
    "title": "Les 2",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-2/index",
    
    "relUrl": "/les-2/index"
  },"63": {
    "doc": "Les 5",
    "title": "De WordPress loop in de index",
    "content": "Wij gaan nu de dynamische content in de pagina plaatsen. In het wp-admin gedeelte heb je al wat data toegevoegd, deze gaan wij nu aan de voorkant laten zien. Voorbereiding . Voordat voordat je de informatie kunt weergeven moet je eerst twee extra blog posts aanmaken, dit heb je nodig om straks te kunnen testen. 1- Posts aanmaken . Ga in het wp-admin gedeelte naar posts toe, en voeg een nieuwe post toe. Vergeet niet om op publish te klikken. Maak minimaal 2 posts aan. 2- Pagina aanmaken . Vervolgens maak je een page ( pagina ) die je gebruikt om de posts / je blog te kunnen zien. Voer in deze pagina alleen een titel toe, bijvoorbeeld blog, verder mag hij leeg zijn. Doe dit door onder pages te klikken op new . 3- Posts pagina selecteren . Ga naar de instellingen / settings Selecteer hier reading Selecteer onder de optie Posts page jouw net aangemaakte blog pagina Als je nu in je nu in je browser naar deze blog pagina toe gaat dan zie je nog niet een overzicht van de berichten, dat klopt! Je bent nu klaar om aan deze les te beginnen. 1- De header . Het is wel zo netjes als in de titel van de pagina ook de naam van de pagina en de site titel staat. Pas daarom de &lt;title&gt; tag aan in de header.php De titel van de pagina laat je zien door deze code te gebruiken: . &lt;?php the_title() ?&gt; . De titel van de site haal je op deze manier op: . &lt;?php bloginfo('title') ?&gt; . 2- De index.php . In de index.php zie je straks mogelijk meerdere berichten onder elkaar staan. Daarom is het belangrijk om in de index.php pagina een loop te plaatsen. Wij gaan gebruik maken van een while loop. Eerst controleren wij of er wel een post is door te controleren op de volgende waarde: . have_posts() . Als de pagina minimaal één post heeft voer je de loop uit, anders geef je een melding dat er geen data is gevonden. Dat kun je uitproberen door een pagina aan te roepen die niet bestaat zoals: /ik_ben_er_niet . Nu moet je een while loop maken binnen deze if statement, voer deze loop uit zolang have_posts() true terug geeft. Zodra je de while loop opent is het belangrijk om eerst de post informatie op te halen zodat je verderop de juiste data weergeeft. Hiervoor gebruik je dit commando: . the_post(); . Daarna kun je verschillende onderdelen van de post ophalen én weergeven met commando’s zoals: the_title(), the_excerpt() en the_content() . Alles bij elkaar zal je code er ongeveer zo uit zien. // Start with a if statement if ( have_posts() ) : // Loop trough the posts while ( have_posts() ) : // Load the data post data the_post(); ?&gt; &lt;main class=\"container my-5\"&gt; &lt;h1 class=\"mt-5\"&gt;&lt;?php the_title() ?&gt;&lt;/h1&gt; &lt;div class=\"col-lg-8 px-0\"&gt; &lt;?php the_excerpt() ?&gt; &lt;/div&gt; &lt;/main&gt; &lt;?php endwhile; else: echo 'Volgens mij zoek je iets dat er niet is'; endif; . 3- Controleer . Bekijk je website nu in de browser. Als het goed is zie je nu de content / data die je een vorige les hebt ingevoerd in het wp-admin gedeelte. Dit was toen waarschijnlijk een pagina of een blog post. ",
    "url": "/m9prog_opdrachtensite/les-5/index_loop#de-wordpress-loop-in-de-index",
    
    "relUrl": "/les-5/index_loop#de-wordpress-loop-in-de-index"
  },"64": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende pagina ga je één enkele pagina of blog item weergeven. Single page en blog implementatie . ",
    "url": "/m9prog_opdrachtensite/les-5/index_loop#commit-en-push",
    
    "relUrl": "/les-5/index_loop#commit-en-push"
  },"65": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-5/index_loop",
    
    "relUrl": "/les-5/index_loop"
  },"66": {
    "doc": "Les 1",
    "title": "HTML bestanden",
    "content": "Nu je de server structuur hebt van je project is het tijd je thema klaar te zetten. 1- Thema folder . Maak een nieuwe folder aan binnen in je thema folder en geef deze de naam van je thema, (gebruik geen kapitalen en spaties). 2- Structuur van de thema folder . | Plaats hierin een nieuw bestand met de naam style.css | Plaats hierin een nieuw bestand met de naam index.php | Plaats hierin een nieuw bestand met de naam functions.php | Plaats hierin een nieuw bestand met de naam screenshot.png Meer informatie over thema’s: https://codex.wordpress.org/Theme_Development | . 3- style.css . Weet je nog hoe het werkt? In dit bestand geef je aan hoe je thema heet. In dit voorbeeld heb ik een nieuw thema gemaakt met de naam M9PROG_VOORBEELD_NAAM Zie voor alle opties: https://developer.wordpress.org/themes/core-concepts/main-stylesheet/ . ",
    "url": "/m9prog_opdrachtensite/les-1/initialiseren#html-bestanden",
    
    "relUrl": "/les-1/initialiseren#html-bestanden"
  },"67": {
    "doc": "Les 1",
    "title": "Dit is een voorbeeld, let op dat je wel de juiste versie van php én WordPress instelt, anders werkt het thema niet.",
    "content": "/** * Theme Name: M9PROG_VOORBEELD_NAAM * Theme URI: https://ma-web.nl * Description: This is a custom WordPress theme example * Version: 0.0.1 * Author: Jasper Heidebrink * Author URI: https://ma-web.nl * Tags: m9prog * Text Domain: M9PROG_VOORBEELD_NAAM * Domain Path: /languages * Tested up to: 6.5 * Requires at least: 6.4 * Requires PHP: 8.2 * License: GNU General Public License v2.0 or later * License URI: https://www.gnu.org/licenses/gpl-2.0.html */ . 4- index.php . Plaats hierin de basis elementen zoals: . get_header(); . De while loop . get_footer(); . 5- functions.php . Plaats hierin de benodigde functies, laat het leeg als je nog geen nieuwe filters of functies hebt. 6- screenshot.png . Zorg dat dit een afbeelding is waar te zien is hoe je website eruit gaat zien. 7- initialisatie . Nu je de structuur hebt ingesteld is het eindelijk tijd om docker te starten en naar je browser te gaan om WordPress te initialiseren. ",
    "url": "/m9prog_opdrachtensite/les-1/initialiseren#dit-is-een-voorbeeld-let-op-dat-je-wel-de-juiste-versie-van-php-%C3%A9n-wordpress-instelt-anders-werkt-het-thema-niet",
    
    "relUrl": "/les-1/initialiseren#dit-is-een-voorbeeld-let-op-dat-je-wel-de-juiste-versie-van-php-én-wordpress-instelt-anders-werkt-het-thema-niet"
  },"68": {
    "doc": "Les 1",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . testen . ",
    "url": "/m9prog_opdrachtensite/les-1/initialiseren#commit-en-push",
    
    "relUrl": "/les-1/initialiseren#commit-en-push"
  },"69": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-1/initialiseren",
    
    "relUrl": "/les-1/initialiseren"
  },"70": {
    "doc": "Les 1",
    "title": "Development omgeving instellen",
    "content": "We gaan een Docker container samenstellen. Deze omgeving gaan wij tijdens deze gehele module gebruiken. ",
    "url": "/m9prog_opdrachtensite/les-1/installatie#development-omgeving-instellen",
    
    "relUrl": "/les-1/installatie#development-omgeving-instellen"
  },"71": {
    "doc": "Les 1",
    "title": "Requirements",
    "content": "In de vorige les heb je een aantal requirements samengesteld, een aantal daarvan gaan wij nu instellen. Er zijn een aantal vereisten aan dit project: . | Je hebt een werkende Docker Desktop installatie. | De volgende poorten zijn niet in gebruik: . | 80 | 3305 | 8805 | . | Je hebt een werkende IDE waarmee je websites kunt ontwikkelen, bijvoorbeeld Visual Code of PhpStorm | . 1- Repository . 1- Maak een nieuwe repository aan in GitHub voor m9prog-blog, zorg dat de repository private is. 2- Navigeer op je computer naar de folder waar je project straks komt te staan, niet een nieuwe lege folder aanmaken. 3- Clone je github project zodat je een nieuwe folder hebt die gekoppeld is aan git en waar straks je bestanden in komen. 2- Docker container initialiseren . | Start eerst Docker Desktop | Navigeer naar de repo folder die je net gekloond hebt | Maak een nieuw bestand aan met de naam: docker-compose.yml | maak de structuur van dit yml bestand services: NAAM: image: WELKE IMAGE HEB JE NODIG container_name: prog_m5_TYPE environment: title: waarde INTERNE CONSTANTEN ports: - EXTERN:INTERN - 9999:80 links: - IS DEZE CONTAINER GEKOPPELD AAN EEN ANDERE CONTAINER? volumes: - './:/var/www/html' depends_on: - HEEFT DEZE CONTAINER EEN ANDERE CONTAINER NODIG? . | . 3- Definieer de volgende containers: . | wordpress met image: wordpress:latest | mariadb met de image: mariadb:latest | phpmyadmin met de image: phpmyadmin:latest en de externe poort 8805 | De wordpress container heeft de volgende environment constanten nodig: WORDPRESS_DB_HOST: '${DB_HOST}' WORDPRESS_DB_NAME: '${DB_NAME}' WORDPRESS_DB_USER: '${DB_USERNAME}' WORDPRESS_DB_PASSWORD: '${DB_PASSWORD}' . | De wordpress container heeft de volgende environment constanten nodig: ```yml . | ./themes:/var/www/html/wp-content/themes | ./plugins:/var/www/html/wp-content/plugins | ./uploads:/var/www/html/wp-content/uploads ``` | . | De Mariadb container heeft de volgende environment constanten nodig: MYSQL_DATABASE: '${DB_NAME}' MYSQL_USER: '${DB_USERNAME}' MYSQL_PASSWORD: '${DB_PASSWORD}' MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}' . | De PhpMyAdmin container heeft de volgende environment constanten nodig: PMA_HOST: '${DB_HOST}' PMA_USER: '${DB_USERNAME}' PMA_PASSWORD: '${DB_PASSWORD}' . | . 4- Variabele in een .env file . Zoals in andere projecten maak je ook nu weer een .env file . | maak een voorbeeld .env file aan met de naam: .env.example | plaats hierin de variabele die je straks gaat gebruiken: DB_NAME= DB_USERNAME= DB_PASSWORD= DB_ROOT_PASSWORD= . | dupliceer dit bestand naar: .env | vul de waardes in deze .env file | . 5- Negeren van bestanden via de .gitignore . Maak nu een .gitignore file aan om te zorgen dat niet alles naar git gaat. Hierbij een voorbeeld inhoud: . ### Node an Vendor files node_modules/ vendor/ ### JetBrains .idea ### Linux *~ .Trash-* ### Windows Thumbs.db ehthumbs.db Desktop.ini $RECYCLE.BIN/ *.cab *.msi *.msm *.msp *.lnk ### OSX .DS_Store .AppleDouble .LSOverride .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns ### Application .env _sources . 6- Folders . Maak de volgende drie folders aan waar je straks je plugins en thema kunt plaatsen: . | themes | plugins | uploads | . ",
    "url": "/m9prog_opdrachtensite/les-1/installatie#requirements",
    
    "relUrl": "/les-1/installatie#requirements"
  },"72": {
    "doc": "Les 1",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . Initialiseren van WordPress . ",
    "url": "/m9prog_opdrachtensite/les-1/installatie#commit-en-push",
    
    "relUrl": "/les-1/installatie#commit-en-push"
  },"73": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-1/installatie",
    
    "relUrl": "/les-1/installatie"
  },"74": {
    "doc": "Les 8",
    "title": "Wat is lokalisatie binnen WordPress?",
    "content": "Een WordPress thema of plugin kan een eigen vertaling hebben voor verschillende onderdelen zoals buttons, labels en andere vaste onderdelen. Binnen WordPress kun je redelijk eenvoudig een thema of plugin vertalen, dit noemen wij Lokalisatie. Lokalisatie wordt afgekort als l10n (omdat er 10 letters tussen de l en de n staan). 1- Text-domein instellen . In de style.css kun je het text-domein instellen. Dit is een string waarin je de naam van het thema aangeeft. Binnen je thema gebruik je deze string al op verschillende plekken. Dat doe je met deze regel: . Text Domain: m5prog-custom . Die waarde gebruik je overal waar je een vertaalde tekst wilt terug geven ( return ). Dit heb je al een paar keer gedaan, bijvoorbeeld hier: . __( 'Header Menu', 'm5prog-custom' ) . Of als je direct iets wilt weergeven ( echo ) . _e( 'Header Menu', 'm5prog-custom' ) . 2- Thema vertalen . Er zijn verschillende tools om een thema of plugin te vertalen. In mijn voorbeeld maak ik gebruik van Poeedit Deze tool kan alle bestanden van je thema of plugin laten controleren en zie precies wat je moet vertalen. Nadat je het *.pot bestand vertaald hebt en opgeslagen heb je een *.po én een *.mo bestand. Deze bestanden bevatten jouw echte vertalingen. Maak nu een nederlandse vertaling van je project (nl_NL). 3- Locatie van de vertalingen instellen . WordPress weet niet standaard waar de vertalingen staan, daarom moeten wij een via een action-hook aangeven waar de bestanden staan. Door een nieuwe actie toe te voegen aan de after_setup_theme hook zullen de vertalingen geladen worden nadat WordPress het thema heeft geïnitialiseerd. Dat doe je door deze code toe te voegen aan je functions.php: . /** * Tell WordPress where the localization files are * * @return void */ function load_custom_textdomain() { load_theme_textdomain( 'm5prog-custom', get_template_directory() . '/languages' ); } add_action('after_setup_theme', 'load_custom_textdomain'); . 4- Vertaling controleren . In wp-admin kun je naar jouw profiel gaan door rechtsboven op je naam te klikken. Halverwege deze pagina kun je een taal selecteren, selecteer hier nu Nederlands en sla de wijzigingen op. Als je nu in de wp-admin omgeving naar het Widgets onderdeel gaat dan zie je nu dat de onderdelen in het Nederlands zijn. Links . | developer.wordpress.org localization | Poeedit | . ",
    "url": "/m9prog_opdrachtensite/les-8/localization#wat-is-lokalisatie-binnen-wordpress",
    
    "relUrl": "/les-8/localization#wat-is-lokalisatie-binnen-wordpress"
  },"75": {
    "doc": "Les 8",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m9prog_opdrachtensite/les-8/localization#commit-en-push",
    
    "relUrl": "/les-8/localization#commit-en-push"
  },"76": {
    "doc": "Les 8",
    "title": "Les 8",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-8/localization",
    
    "relUrl": "/les-8/localization"
  },"77": {
    "doc": "Les 5",
    "title": "De WordPress loop structuur",
    "content": "Zorg dat je deze introductie even rustig doorleest zodat je snapt hoe WordPress omgaat met de header en footer. ",
    "url": "/m9prog_opdrachtensite/les-5/loop_explain#de-wordpress-loop-structuur",
    
    "relUrl": "/les-5/loop_explain#de-wordpress-loop-structuur"
  },"78": {
    "doc": "Les 5",
    "title": "Templates",
    "content": "WordPress gebruikt zeven hoofdtypes pagina’s, de flow kun je in de afbeelding hieronder zien. In deze sectie bespreken lopen wij er even doorheen, in de volgende les gaan wij aan de slag met de index (frond end ). Dit zijn de verschillenden pagina types: . | Frontpagina | Single Posts | Single Pages | Custom Post Types | Zoekresultaat pagina’s | Categorie, taxonomy- en tag pagina’s | 404 error pagina’s | . 1- Frontpagina . Je WordPress homepagina is vaak de eerste plek die gebruikers zien als zij je website bezoeken. Voordat de juiste pagina geladen is zal WordPress in de volgende volgorde zoeken naar deze drie templatebestanden: . | front-page.php | home.php | index.php Als je thema geen front-page.php templatebestand heeft, gebruikt WordPress standaard de tweede optie, enzovoort. Het index.php bestand de laatste stop die WordPress maakt in deze beslissingsboom van templates waardoor dit altijd de default is. | . 2- Single Posts . Individuele WordPress artikelen gebruiken de single post. Voor elk blogbericht zoekt WordPress naar de volgende bestanden: . | single.php | singular.php | index.php Als je naar het lijstje kijkt over de templates, zal je echter zien dat in sommige gevallen er een complexere hiërarchie is. Dat komt omdat je met WordPress aparte template bestanden kan toewijzen voor de verschillende individuele berichten en single categorieën, en het pas op single.php overstapt als het geen van deze opties vindt. | . 3- Single Pages . Na de index zijn voor de meeste WordPress sites ook single pagina’s enorm belangrijk. In de meeste gevallen is dit een andere template dan de homepagina. Zo ziet de hiërarchie van de template van een single page eruit: . | page.php | singular.php | index.php Hoewel de template hiërarchie voor single berichten en pagina’s vergelijkbaar is, zijn er enkele belangrijke verschillen, de belangrijkste: Je kunt ook de template maken voor specifieke slugs en ID’s. Als je een page-{slug}.php of een page-{id}.php bestand hebt zal WordPress deze eerder laden dan de standaard page.php. | . 4- Custom Post Types . Je kan custom post-types maken om een specifiek type content aan te geven. Custom post-types zorgen voor betere organisatie van je content en hebben ook hun eigen template-hiërarchie: Voor de overzicht pagina’s: . | archive-{post_type}.php | archive.php | index.php Voor de enkele pagina’s | single-{post_type}.php | single.php | singular.php | index.php De template-hiërarchie voor custom berichttypes is minder complex dan volledige pagina’s of berichten. Met WordPress kun je template bestanden maken voor elk custom berichttype, omdat ze niet exact dezelfde lay-outs hoeven te delen. | . 5- Zoekresultaat pagina’s . Binnen WordPress is er een standaard pagina die zoekresultaten weergeeft. Zo ziet de hiërarchie van de template van een zoek page eruit: . | search.php | index.php Binnen een zoekpagina hoef je waarschijnlijk niet veel elementen op te nemen behalve de resultaten zelf. | . 6- Categorie-, taxonomie- en tagpagina’s . Hoewel veel websites er niet rechtstreeks naar linken, genereert WordPress collectieve pagina’s voor je tags, taxonomies en categorieën. Er zijn ook specifieke subpagina’s voor elk item binnen die taxonomie. Doordat de taxonomie erg complex kan worden voor websites met veel content, omvat deze hiërarchie meer ‘stappen’ dan normaal: . | category–{slug}.php | category-{id}.php | category.php | archive.php | index.php Categorieën, taxonomies en tags worden op dezelfde manier verwerkt in WordPress. In de bovenstaande structuur vervang je voor alleen category door tag of taxonomy. | . ",
    "url": "/m9prog_opdrachtensite/les-5/loop_explain#templates",
    
    "relUrl": "/les-5/loop_explain#templates"
  },"79": {
    "doc": "Les 5",
    "title": "7- 404 error pagina’s",
    "content": "Soms proberen bezoekers toegang te krijgen tot een pagina die niet bestaat. Wanneer dat gebeurt retourneert WordPress net als bij andere websites een 404 error pagina. Standaard biedt WordPress geen mogelijkheden om het uiterlijk van deze pagina aan te passen zodat deze mooi in stijl is van je website. De template-hiërarchie is vrij kort: . | 404.php | index.php Zo kun je bijvoorbeeld ook een zoekformulier toevoegen aan de 404 pagina om bezoekers te helpen de juiste pagina te vinden. | . ",
    "url": "/m9prog_opdrachtensite/les-5/loop_explain#7--404-error-paginas",
    
    "relUrl": "/les-5/loop_explain#7--404-error-paginas"
  },"80": {
    "doc": "Les 5",
    "title": "Dit was even een flink verhaal, maar het is de basis van WordPress dus erg belangrijk dat je de flow snapt.",
    "content": ". Links . | Meer informatie over de hiërarchie | . Volgende stap: . WordPress loop implementeren in de index . ",
    "url": "/m9prog_opdrachtensite/les-5/loop_explain#dit-was-even-een-flink-verhaal-maar-het-is-de-basis-van-wordpress-dus-erg-belangrijk-dat-je-de-flow-snapt",
    
    "relUrl": "/les-5/loop_explain#dit-was-even-een-flink-verhaal-maar-het-is-de-basis-van-wordpress-dus-erg-belangrijk-dat-je-de-flow-snapt"
  },"81": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-5/loop_explain",
    
    "relUrl": "/les-5/loop_explain"
  },"82": {
    "doc": "Les 5",
    "title": "Het WordPress menu",
    "content": "Binnen WordPress is er een uitgebreid menu systeem, dat gaan wij nu implementeren in onze template. Zo kan de beheerder zelf het menu beheren en hoef jij niet na te denken over welk item actief is. ",
    "url": "/m9prog_opdrachtensite/les-5/menu#het-wordpress-menu",
    
    "relUrl": "/les-5/menu#het-wordpress-menu"
  },"83": {
    "doc": "Les 5",
    "title": "Actions and Filters",
    "content": "Tijdens deze les gaan wij actions en filters gebruiken, daarom eerst een uitleg. Actie_hooks Actie_hooks (Action Hooks) stellen je in staat om je eigen code uit te voeren op specifieke punten tijdens de uitvoering van WordPress. Bijvoorbeeld: je zou een actie_hook kunnen gebruiken om een functie uit te voeren wanneer een post wordt gepubliceerd of wanneer een pagina wordt geladen. Binnen WordPress worden op verschillende momenten acties uitgevoerd waarop je kunt inhaken. Zie hier een overzicht van de actions_hooks: WordPress action reference Hier vind je meer informatie over de action_hook: WordPress add_action Filter_hooks Naast actions_hooks zijn er ook filter_hook, hiermee kun je een verwerkt resultaat aanpassen. Als je bijvoorbeeld overal waar een titel staat deze zo wilt aanpassen dat de eerste letter altijd een kapitaal is dan kun je inhaken op de the_title filter. Zie hier een overzicht van de filter_hooks: WordPress filter reference Hier vind je meer informatie over de filter_hook: WordPress add_filter . ",
    "url": "/m9prog_opdrachtensite/les-5/menu#actions-and-filters",
    
    "relUrl": "/les-5/menu#actions-and-filters"
  },"84": {
    "doc": "Les 5",
    "title": "1- Menu ondersteuning toevoegen",
    "content": "In de functions.php moet je even aangeven jouw thema menu functionaliteit ondersteunt. Dit doe je door in te haken op de init action van WordPress. function register_my_menus() { register_nav_menus( [ 'header' =&gt; __( 'Header Menu', 'Text_Domain' ), 'other' =&gt; __( 'Other Menu', 'Text_Domain' ), ] ); } add_action( 'init', 'register_my_menus' ); . ",
    "url": "/m9prog_opdrachtensite/les-5/menu#1--menu-ondersteuning-toevoegen",
    
    "relUrl": "/les-5/menu#1--menu-ondersteuning-toevoegen"
  },"85": {
    "doc": "Les 5",
    "title": "2- Extra filters",
    "content": "Omdat ik in mijn voorbeeld gebruik maak van Bootstrap moet ik een extra aanpassing doen om het menu te laten voldoen aan het Bootstrap formaat. Daarom voeg ik ook deze filters toe aan functions.php . /** * Function to add extra classes to the menu list element * @usage: * Add 'add_li_class' =&gt; 'nav-item', * as an extra option to wp_nav_menu() * * @param $classes * @param $item * @param $args * * @return mixed */ function add_additional_class_on_li($classes, $item, $args) { if(isset($args-&gt;add_li_class)) { $classes[] = $args-&gt;add_li_class; } return $classes; } add_filter('nav_menu_css_class', 'add_additional_class_on_li', 1, 3); /** * Function to add extra classes to the menu anchor element * @usage: * Add 'add_li_class' =&gt; 'nav-item', * as an extra option to wp_nav_menu() * * @param $attributes * @param $item * @param $args * * @return mixed * / */ function add_additional_class_on_a($attributes, $item, $args) { if ( empty( $attributes['class'] ) ) { $attributes['class'] = ''; } if(isset($args-&gt;add_a_class)) { $attributes['class'] .= ' ' . $args-&gt;add_a_class; } return $attributes; } add_filter('nav_menu_link_attributes', 'add_additional_class_on_a', 1, 3); . ",
    "url": "/m9prog_opdrachtensite/les-5/menu#2--extra-filters",
    
    "relUrl": "/les-5/menu#2--extra-filters"
  },"86": {
    "doc": "Les 5",
    "title": "3- Aanmaken van een menu",
    "content": "In het wp-admin gedeelte kun je onder Appearance en dan het kopje menus een nieuw menu aanmaken. Geef ook aan op welke Display location deze moet verschijnen. ",
    "url": "/m9prog_opdrachtensite/les-5/menu#3--aanmaken-van-een-menu",
    
    "relUrl": "/les-5/menu#3--aanmaken-van-een-menu"
  },"87": {
    "doc": "Les 5",
    "title": "4- Menu weergeven in de header",
    "content": "Nu je een menu hebt aangemaakt wil je hem natuurlijk ook weergeven aan de voorkant van je website. In de header heb je al een statisch menu, nu gaan wij het statische code vervangen door een dynamische. Bekijk hier de configuratie opties: https://developer.wordpress.org/reference/functions/wp_nav_menu/ Ik heb twee extra opties toegevoegd die ik kan gebruiken door de filters die hierboven staan. Dit is de code om het header menu weer te geven volgens het bootstrap format door de filters te gebruiken. &lt;?php wp_nav_menu( [ 'menu' =&gt; 'header', 'link_before' =&gt; '', 'link_after' =&gt; '', 'menu_class' =&gt; 'navbar-nav me-auto mb-2 mb-lg-0', 'container' =&gt; 'div', 'container_class' =&gt; 'collapse navbar-collapse', 'container_id' =&gt; 'navbarSupportedContent', 'add_li_class' =&gt; 'nav-item', 'add_a_class' =&gt; 'nav-link', ] ); ?&gt; . ",
    "url": "/m9prog_opdrachtensite/les-5/menu#4--menu-weergeven-in-de-header",
    
    "relUrl": "/les-5/menu#4--menu-weergeven-in-de-header"
  },"88": {
    "doc": "Les 5",
    "title": "5- Andere menu",
    "content": "Waarschijnlijk heb je ook nog een ‘other menu’ gemaakt. Zorg dat je deze ook weergeeft op je website, bijvoorbeeld in je footer of aan de zijkant. Als je hem niet gebruikt moet je dit extra menu niet aanmaken. ",
    "url": "/m9prog_opdrachtensite/les-5/menu#5--andere-menu",
    
    "relUrl": "/les-5/menu#5--andere-menu"
  },"89": {
    "doc": "Les 5",
    "title": "6- Controleer",
    "content": "Bekijk je website nu in de browser en zie dat je een mooi menu hebt. ",
    "url": "/m9prog_opdrachtensite/les-5/menu#6--controleer",
    
    "relUrl": "/les-5/menu#6--controleer"
  },"90": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . Widgets implementeren . ",
    "url": "/m9prog_opdrachtensite/les-5/menu#commit-en-push",
    
    "relUrl": "/les-5/menu#commit-en-push"
  },"91": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-5/menu",
    
    "relUrl": "/les-5/menu"
  },"92": {
    "doc": "Les 1",
    "title": "Stage blog en portfolio",
    "content": "Voordat je een stage plek hebt gevonden zul je een portfolio site moeten ontwikkelen om je te presenteren. Daarnaast heb je een website nodig waar je blogs kunt bijhouden voor je stage beoordeling. Deze onderdelen gaan wij tijdens de PROG en BO lessen ontwikkelen. — . 1- Onderzoek wat er gedaan moet worden . | Lees eerst de project omschrijving zodat je weet wat er van je verwacht wordt. | . 2- Requirements . Maak een overzicht van de vereisten die dit project nodig hebben. Denk hierbij aan: . | computer | werkendeIDE | server met de volgende services …. | etc. | . 3- Structuur . Maak een overzicht van hoe je de verschillende requirements gaat verzamelen. Denk hierbij aan: . | docker, een oude docker setup | html structuur, heb ik vorig jaar gemaakt / W3Schools … | etc. | . Volgende stap: . Development omgeving opzetten . ",
    "url": "/m9prog_opdrachtensite/les-1/onderwerp#stage-blog-en-portfolio",
    
    "relUrl": "/les-1/onderwerp#stage-blog-en-portfolio"
  },"93": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-1/onderwerp",
    
    "relUrl": "/les-1/onderwerp"
  },"94": {
    "doc": "Project omschrijving",
    "title": "Project omschrijving",
    "content": " ",
    "url": "/m9prog_opdrachtensite/project_description.html",
    
    "relUrl": "/project_description.html"
  },"95": {
    "doc": "Project omschrijving",
    "title": "Als jouw stage begeleider wil ik een verslag van jouw stage kunnen lesen om je goed te kunnen begeleiden tijdens de stage.",
    "content": ". | Op een website moet een afgeschermde blog beschikbaar zijn die alleen voor genodigden toegankelijk is. | Elke keer als er een nieuw bericht is moeten alle abonnees een mail krijgen dat er een nieuw bericht is. | Het is voor de stagebegeleider mogelijk om bij een bericht comments te plaatsen, deze zijn alleen zichtbaar voor de stagebegeleider én de admin | . ",
    "url": "/m9prog_opdrachtensite/project_description.html#als-jouw-stage-begeleider-wil-ik-een-verslag-van-jouw-stage-kunnen-lesen-om-je-goed-te-kunnen-begeleiden-tijdens-de-stage",
    
    "relUrl": "/project_description.html#als-jouw-stage-begeleider-wil-ik-een-verslag-van-jouw-stage-kunnen-lesen-om-je-goed-te-kunnen-begeleiden-tijdens-de-stage"
  },"96": {
    "doc": "Project omschrijving",
    "title": "Blog",
    "content": "Voor deze blog kun je de standaard functionaliteit van WordPress gebruiken. Voor het beheren van de toegang van gebruikers en het versturen van mails maken wij straks een custom plugin. ",
    "url": "/m9prog_opdrachtensite/project_description.html#blog",
    
    "relUrl": "/project_description.html#blog"
  },"97": {
    "doc": "Project omschrijving",
    "title": "Doel",
    "content": "Aan het eind van dit project heb je een website ontwikkeld die je kunt gebruiken voor je stage. ",
    "url": "/m9prog_opdrachtensite/project_description.html#doel",
    
    "relUrl": "/project_description.html#doel"
  },"98": {
    "doc": "Project omschrijving",
    "title": "Omschrijving",
    "content": "Er komen in dit project verschillende onderdelen op de website: . | geen toegang tot blogs pagina, voor mensen die niet ingelogd zijn | overzicht van blogs pagina | detail informatie van een bericht | mogelijkheid om comments te plaatsen bij elk bericht | menu waarbij je kunt kiezen tussen stage 1 én stage 2 | wie ben ik pagina ( about pagina over jou ) | . 1. Gast pagina . Op deze pagina is duidelijk dat iemand niet is ingelogd en daardoor geen blog berichten mag lezen. 2. Overzicht blogs . Hier is straks een lijst met blog items zichtbaar, per bericht is het volgende zichtbaar: . | Titel | Datum | Intro De volgorde is op datum, nieuwste bericht staat bovenaan. | . 3. Bericht pagina . Per bericht is straks het volgende zichtbaar: . | Titel | Datum | Content | Categorie ( stage 1 / stage 2 ) | Comments | . ",
    "url": "/m9prog_opdrachtensite/project_description.html#omschrijving",
    
    "relUrl": "/project_description.html#omschrijving"
  },"99": {
    "doc": "Project omschrijving",
    "title": "Randvoorwaarden:",
    "content": ". | De applicatie moet ontwikkeld worden in PHP eventueel in combinatie met JavaScript. | Het lokaal ontwikkelen van dit project gaat via een Docker container. | De data wordt in de database opgeslagen | Er moet een error afhandeling zijn die de gebruiker informeert waarom iemand een bericht niet mag bekijken. | Deze module moet functioneren in de laatste versies van Chrome, Safari, Firefox en Edge | Ontwikkel deze website ‘Mobile-first’ | Taal: minimaal Nederlands | . ",
    "url": "/m9prog_opdrachtensite/project_description.html#randvoorwaarden",
    
    "relUrl": "/project_description.html#randvoorwaarden"
  },"100": {
    "doc": "Les 7",
    "title": "Registreren van een custom post type",
    "content": "In deze les ga je een custom post type registreren. Ik gebruik wood als voorbeeld, jij moet voor jezelf een ander type gaan gebruiken. 1- Structuur . Om mijn project gestructureerd te houden heb ik eerst een folder aangemaakt in CammelCase met de naam van het thema. In mijn geval M8progCustom Hierin plaats ik de functionaliteiten, om te beginnen met post-types, daarom heb ik daarom het volgende php document aangemaakt: PostType.php Dit bestand moet je natuurlijk wel laden, dat doe je door deze via de php require_once te implementeren in de functions.php. 2- Labels . Voordat wij gaan registreren definiëer ik de labels van dit post-type zodat straks dit element goed terug kan vinden. Dit doe ik door in mijn PostType.php document de volgende code te plaatsen. ",
    "url": "/m9prog_opdrachtensite/les-7/register#registreren-van-een-custom-post-type",
    
    "relUrl": "/les-7/register#registreren-van-een-custom-post-type"
  },"101": {
    "doc": "Les 7",
    "title": "Let op dat je de juiste term en text-domein gebruikt!",
    "content": "$labels = [ 'name' =&gt; __( 'Woods', 'Text_Domain' ), 'singular_name' =&gt; __( 'Wood', 'Text_Domain' ), 'add_new' =&gt; __( 'New Wood', 'Text_Domain' ), 'add_new_item' =&gt; __( 'Add New Wood', 'Text_Domain' ), 'edit_item' =&gt; __( 'Edit Wood', 'Text_Domain' ), 'new_item' =&gt; __( 'New Wood', 'Text_Domain' ), 'view_item' =&gt; __( 'View Wood', 'Text_Domain' ), 'search_items' =&gt; __( 'Search Wood', 'Text_Domain' ), 'not_found' =&gt; __( 'No Wood Found', 'Text_Domain' ), 'not_found_in_trash' =&gt; __( 'No Wood found in Trash', 'Text_Domain' ), ]; . 3- Definiëren van de argumenten voor je custom post type . De volgende stap is het definiëren van de argumenten. Eén van de argumenten is de array met labels die we al toegevoegd hebben. Onder de labels, en nog steeds binnen de haken, voeg je dit toe: . $args = [ 'labels' =&gt; $labels, 'has_archive' =&gt; true, 'public' =&gt; true, 'hierarchical' =&gt; false, 'supports' =&gt; [ 'title', 'editor', 'excerpt', 'custom-fields', 'thumbnail', 'page-attributes', ], 'rewrite' =&gt; [ 'slug' =&gt; 'wood' ], 'show_in_rest' =&gt; true, ]; . Laten we eens kijken wat deze allemaal doen: . | Labels: de array met labels die we al eerder definieerden. | has_archive: zorgt dat je een post type archief voor je custom post type kunt maken. | public: zorgt dat het post type ook verschijnt binnen de zoekresultaten. Dit staat standaard uit en wil ik graag inschakelen. | hierarchical waarde hangt af van hoe je precies je custom post type wilt gaan gebruiken. Als je dit op true zet, zal het post type zich gedragen als het pagina-type, waarbij je een hiërarchie kunt aanbrengen met parent en child-berichten. Als je dit op false zet, zal het zich gedragen als een gewoon bericht, zonder hiërarchie. | supports array definieert een aantal features van post types die dit custom type kan ondersteunen. Verschillende opties zijn: ‘title’, ‘editor’, ‘comments’, ‘revisions’, ‘trackbacks’, ‘author’, ‘excerpt’, ‘page-attributes’, ‘thumbnail’, ‘custom-fields’, en ‘post-formats’. | rewrite kun je gebruiken om je taxonomie een andere te geven. | show_in_rest zorgt ervoor dat het post type toegankelijk is via de REST API en de admin interface. Hier vind je de complete uitleg: https://developer.wordpress.org/reference/functions/register_post_type/ | . 4- Registratie . Het registreren is nadat je alles hebt ingesteld super simpel, je hoeft alleen de post-type en de argumenten door te geven. register_post_type( 'wood', $args ); . 3- Controleer . Ga nu naar je admin omgeving en zie dat in het menu een nieuw item is toegevoegd. Voeg nu minimaal 2 custom post types toe aan je website. Links . https://developer.wordpress.org/reference/functions/register_post_type/ https://developer.wordpress.org/reference/functions/register_taxonomy/ . ",
    "url": "/m9prog_opdrachtensite/les-7/register#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt",
    
    "relUrl": "/les-7/register#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt"
  },"102": {
    "doc": "Les 7",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende opdracht ga je een categorie toevoegen. Registreren van een taxonomie . ",
    "url": "/m9prog_opdrachtensite/les-7/register#commit-en-push",
    
    "relUrl": "/les-7/register#commit-en-push"
  },"103": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-7/register",
    
    "relUrl": "/les-7/register"
  },"104": {
    "doc": "Les 5",
    "title": "De WordPress single page",
    "content": "Je hebt net een fallback en overzicht pagina gemaakt. Nu ga je een pagina maken waarbij je de content van één page of blog post weergeeft. 1- Aanmaken van page.php . Dupliceer de index.php pagina en noem hem page.php Deze pagina gaat straks een de informatie van één pagina weergeven. 2- Elementen in de page.php . Je hoeft nu niet meer gebruik te maken van een if statement of een loop. Je kunt direct in de pagina de verschillende elementen weergeven. Het is wel handig om aan het begin van je pagina de onderstaande functie aan te roepen zodat alle data klaar staat om te gebruiken. &lt;?php the_post(); ?&gt; . Doe je dat niet, dan weet WordPress bij sommige functies niet welke post je bekijkt en krijg je geen of onverwachte data terug. Zorg ervoor dat je de hele content van het bericht weergeeft, niet alleen de intro ( the excerpt ). 3- Single.php . Om de blogs / posts items netjes weer te geven in dezelfde vormgeving kun je nu de page.php dupliceren naar single.php. Voeg een aantal elementen toe die specifiek zijn voor een blog item ( nieuws bericht ). Hier kun je verschillende functies vinden die je binnen WordPress kunt gebruiken https://developer.wordpress.org/reference/functions/ Een paar voorbeelden: . | php &lt;?php the_date() ?&gt; geeft de datum weer dat het bericht gemaakt is. | php &lt;?php the_modified_date() ?&gt; geeft de datum weer dat het bericht geupdate is. | php &lt;?php echo get_avatar( get_the_author_meta('user_email'), '80', '-' ); ?&gt; geeft de avatar weer van de auteur. | php &lt;?php the_author_meta('description') ?&gt; geeft de bio weer van de auteur. | . Wil je ook een volgende en vorige knop om te navigeren tussen de blog posts, dan kun je de onderstaande code gebruiken. Text_Domain moet je dan vervangen door jouw Text-Domain zoals je hebt ingesteld in style.css. // Previous/next post navigation. the_post_navigation( [ 'next_text' =&gt; __( 'Next post', 'Text_Domain' ), 'prev_text' =&gt; __( 'Previous post:', 'Text_Domain' ), ] ); . 3- Controleer . Bekijk je website nu in de browser. Als het goed is zie je nu de content die je ingesteld hebt in het wp-admin gedeelte. ",
    "url": "/m9prog_opdrachtensite/les-5/single_page#de-wordpress-single-page",
    
    "relUrl": "/les-5/single_page#de-wordpress-single-page"
  },"105": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende opdracht ga je zelf een dynamisch menu implementeren. Menu implementeren . ",
    "url": "/m9prog_opdrachtensite/les-5/single_page#commit-en-push",
    
    "relUrl": "/les-5/single_page#commit-en-push"
  },"106": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-5/single_page",
    
    "relUrl": "/les-5/single_page"
  },"107": {
    "doc": "Les 4",
    "title": "De WordPress pagina structuur",
    "content": "Zorg dat je deze introductie even rustig doorleest zodat je snapt hoe WordPress omgaat met de header en footer. Binnen een WordPress thema vind je vaak een header.php én een footer.php document. Twee voorbeeld bestanden kun je hier downloaden: header.php footer.php Dit zijn voorbeeld bestanden ter inspiratie. Maak zelf een header.php én een footer.php bestand aan in je thema folder, hiermee zorg je dat alle pagina’s dezelfde stijl hebben. Als je de header van een specifiek post-type anders wilt hebben dan de andere pagina’s dan maak je een bestand met een andere naam. Bijvoorbeeld: header-customposttype.php. Header . In vorige php projecten gebruikte je include(), require() of @import() functies om een bepaald document in te laden. Binnen WordPress is er voor de header en footer een uitzondering. De header template kun je laden met het volgende php commando: . get_header(); . Binnen de header.php moet je minimaal de onderstaande php functie aanroepen. Deze moet je laden binnen de html &lt;head&gt; om diverse functies uit te voeren zoals het laden van CSS en JavaScripts. &lt;?php wp_head(); ?&gt; . Binnen de header voeg je diverse HTML elementen toe: . | Open de html tag | Open en sluit de head tag | Voeg de meta tags toe aan de head | Voer binnen de head de php functie wp_head() uit | Open de body tag en voeg daar de body_class aan toe: &lt;body &lt;?php body_class(); ?&gt;&gt; | Implementeer de navigatie. | . Footer . Het idee van de footer is hetzelfde als de titel, alleen sluit je nu de html af. De footer template wordt geladen met de volgende php functie: . get_footer(); . Binnen de footer moet je minimaal deze php functie aanroepen net voor je de body tag afsluit. Deze php functie zorgt ervoor dat er diverse acties uitgevoerd worden zoals het laden van JavaScripts en extra toevoegingen aan de HTML pagina. &lt;?php wp_footer(); ?&gt; . Binnen de footer voeg je diverse HTML elementen toe: . | Voer net voor het afsluiten van de body de php functie wp_footer() uit | Sluit de body tag | Sluit de html tag | . Body data . Alle andere informatie zoals een titel, intro, omschrijving worden straks geladen in onder andere de index.php. In de volgende opdracht ga je zelf een header.php en footer.php maken. Volgende stap: . WordPress header template en functies . ",
    "url": "/m9prog_opdrachtensite/les-4/structure#de-wordpress-pagina-structuur",
    
    "relUrl": "/les-4/structure#de-wordpress-pagina-structuur"
  },"108": {
    "doc": "Les 4",
    "title": "Les 4",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-4/structure",
    
    "relUrl": "/les-4/structure"
  },"109": {
    "doc": "Les 3",
    "title": "Maak de structuur van je custom theme",
    "content": "Veel bedrijven maken een custom WordPress thema voor een specifieke klant of event. Jij gaat nu een WordPress thema maken voor een specifieke klant. Door gebruik te maken van WordPress hoef je je geen zorgen te maken over CRUD-functionaliteit of database verbindingen. ",
    "url": "/m9prog_opdrachtensite/les-3/structure#maak-de-structuur-van-je-custom-theme",
    
    "relUrl": "/les-3/structure#maak-de-structuur-van-je-custom-theme"
  },"110": {
    "doc": "Les 3",
    "title": "Thema naam",
    "content": "Op de plekken waar je ziet staan: ‘M5PROG_THEME_NAME’ moet straks natuurlijk naam van jouw eigen thema plaatsen. 1- Structuur van de thema folder . | Maak een nieuwe folder aan in de thema folder met de naam voor jouw thema, (gebruik geen kapitalen en spaties) | Plaats hierin een nieuw bestand met de naam style.css | Plaats hierin een nieuw bestand met de naam index.php | Plaats hierin een nieuw bestand met de naam functions.php | Plaats hierin een nieuw bestand met de naam screenshot.png Meer informatie over thema’s: https://codex.wordpress.org/Theme_Development | . 2- screenshot.png . Dit bestand is een screenshot of het design van jouw eigen thema zodat je straks makkelijker het thema kunt kiezen. Plaats hierin een afbeelding. 3- functions.php . Hier komt diverse functies voor dit thema net zoals bij het child thema. Begin met het laden van de style. function m5prog_enqueue_styles() { wp_enqueue_style( 'm5prog-style', get_stylesheet_uri() ); } add_action( 'wp_enqueue_scripts', 'm5prog_enqueue_styles' ); . Voeg ook alvast de featured image functionaliteit toe zodat je straks eenvoudig afbeeldingen kunt toevoegen aan posts: . add_theme_support( 'post-thumbnails' ); . 4- index.php . Hier komen straks de codes in die je pagina’s weergeven. Plaats nu tijdelijk even een voorbeeld tekst in dit document, geen opmaak, alleen een test. Als je niets kunt verzinnen gebruik dan deze dump: . &lt;?php echo '&lt;pre style=\"background:#0f0; padding: 2rem; width:100%;\"&gt;'; print_r( 'dit is mijn index pagina' ); echo '&lt;/pre&gt;'; die(__FILE__.':'.__LINE__); . 5- Hiërarchie . De opzet van WordPress gaat volgens een bepaalde structuur, net als bij andere frameworks, meer informatie vind je hier: https://kinsta.com/nl/blog/template-hierarchie-van-wordpress/ Of als je liever een rustgevende video wilt bekijken: https://learn.wordpress.org/tutorial/a-beginners-guide-to-the-wordpress-template-hierarchy/ . ",
    "url": "/m9prog_opdrachtensite/les-3/structure#thema-naam",
    
    "relUrl": "/les-3/structure#thema-naam"
  },"111": {
    "doc": "Les 3",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . Stel de style.css in . ",
    "url": "/m9prog_opdrachtensite/les-3/structure#commit-en-push",
    
    "relUrl": "/les-3/structure#commit-en-push"
  },"112": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-3/structure",
    
    "relUrl": "/les-3/structure"
  },"113": {
    "doc": "Les 3",
    "title": "Stel de style.css in",
    "content": "In het style.css bestand geef je nu wat informatie over dit thema weer. 1- style.css . In dit bestand geef je aan hoe je thema heet en wat de parent is. In dit voorbeeld heb ik een nieuw thema gemaakt met de naam M5PROG_THEME_NAME Zie voor alle opties: https://developer.wordpress.org/themes/core-concepts/main-stylesheet/ . ",
    "url": "/m9prog_opdrachtensite/les-3/style_css#stel-de-stylecss-in",
    
    "relUrl": "/les-3/style_css#stel-de-stylecss-in"
  },"114": {
    "doc": "Les 3",
    "title": "Dit is een voorbeeld, let op dat je wel de juiste versie van php én WordPress instelt, anders werkt het thema niet.",
    "content": "/** * Theme Name: M5PROG_THEME_NAME * Theme URI: https://ma-web.nl * Description: This is a custom WordPress theme * Version: 0.0.1 * Author: Jasper Heidebrink * Author URI: https://ma-web.nl * Tags: m5prog * Text Domain: M5PROG_THEME_NAME * Domain Path: /languages * Tested up to: 6.5 * Requires at least: 6.4 * Requires PHP: 8.2 * License: GNU General Public License v2.0 or later * License URI: https://www.gnu.org/licenses/gpl-2.0.html */ . Hier kun je zien welke versie van WordPress php je gebruikt: /wp-admin/site-health.php?tab=debug De items Text Domain en Domain Path gaan wij later gebruiken voor de vertalingen. ",
    "url": "/m9prog_opdrachtensite/les-3/style_css#dit-is-een-voorbeeld-let-op-dat-je-wel-de-juiste-versie-van-php-%C3%A9n-wordpress-instelt-anders-werkt-het-thema-niet",
    
    "relUrl": "/les-3/style_css#dit-is-een-voorbeeld-let-op-dat-je-wel-de-juiste-versie-van-php-én-wordpress-instelt-anders-werkt-het-thema-niet"
  },"115": {
    "doc": "Les 3",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . Activeer en controleer dit thema . ",
    "url": "/m9prog_opdrachtensite/les-3/style_css#commit-en-push",
    
    "relUrl": "/les-3/style_css#commit-en-push"
  },"116": {
    "doc": "Les 3",
    "title": "Les 3",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-3/style_css",
    
    "relUrl": "/les-3/style_css"
  },"117": {
    "doc": "Les 7",
    "title": "Registreren van een custom post type",
    "content": "Nu ga je een taxonomy registreren zodat je custom post type onderverdeeld kan worden in categorieën. 1- Labels . Voordat wij gaan registreren definiëer ik de labels van deze taxonomy. Dit doe ik door in mijn PostType.php document de volgende code te plaatsen. ",
    "url": "/m9prog_opdrachtensite/les-7/taxonomy#registreren-van-een-custom-post-type",
    
    "relUrl": "/les-7/taxonomy#registreren-van-een-custom-post-type"
  },"118": {
    "doc": "Les 7",
    "title": "Let op dat je de juiste term en text-domein gebruikt!",
    "content": "$labels = [ 'name' =&gt; _x( 'Origins', 'taxonomy general name', 'Text_Domain' ), 'singular_name' =&gt; _x( 'Origin', 'taxonomy singular name', 'Text_Domain' ), 'search_items' =&gt; __( 'Search Origins', 'Text_Domain' ), 'popular_items' =&gt; __( 'Popular Origins', 'Text_Domain' ), 'all_items' =&gt; __( 'All Origins', 'Text_Domain' ), 'parent_item' =&gt; __( 'Parent Origin', 'Text_Domain' ), 'parent_item_colon' =&gt; __( 'Parent Origin:', 'Text_Domain' ), 'edit_item' =&gt; __( 'Edit Origin', 'Text_Domain' ), 'update_item' =&gt; __( 'Update Origin', 'Text_Domain' ), 'add_new_item' =&gt; __( 'Add New Origin', 'Text_Domain' ), 'new_item_name' =&gt; __( 'New Origin Name', 'Text_Domain' ), 'menu_name' =&gt; __( 'Origins', 'Text_Domain' ), ]; . 2- Definiëren van de argumenten voor je taxonomy . De volgende stap is het definiëren van de argumenten. Eén van de argumenten is de array met labels die we al toegevoegd hebben. Onder de labels, en nog steeds binnen de haken, voeg je dit toe: . $args = [ 'hierarchical' =&gt; true, 'labels' =&gt; $labels, 'show_ui' =&gt; true, 'show_admin_column' =&gt; true, 'query_var' =&gt; true, 'show_in_rest' =&gt; true, 'rewrite' =&gt; [ 'slug' =&gt; 'origin' ], ]; . Laten we eens kijken wat deze allemaal doen: . | hierarchical waarde hangt af van hoe je precies je custom post type wilt gaan gebruiken. Als je dit op true zet, zal het post type zich gedragen als het pagina-type, waarbij je een hiërarchie kunt aanbrengen met parent en child-berichten. Als je dit op false zet, zal het zich gedragen als een gewoon bericht, zonder hiërarchie. | labels: de array met labels die we al eerder definieerden. | show_ui is dit onderdeel wel of niet zichtbaar in de admin omgeving | show_admin_column in het admin overzicht van mijn custom post types kan er een kolom bij komen met deze taxonomy | query_var mag dit element wel of niet opgehaald worden via de wp-query | show_in_rest zorgt ervoor dat het post type toegankelijk is via de REST API en de admin interface. | rewrite wil je dat de slug voor deze taxonomy niet gelijk is aan de naam? Hier vind je de complete uitleg: https://developer.wordpress.org/reference/functions/register_taxonomy/ | . 3- Registratie . Het registreren is nadat je alles hebt ingesteld super simpel, je hoeft alleen de post-type en de argumenten door te geven. register_taxonomy( 'origin', 'wood', $args ); . 3- Controleer . Ga nu naar je admin omgeving en zie dat in het menu een nieuw item is toegevoegd. En dat je bij het bewerken van een custom post type item een categorie kunt selecteren of aanmaken. Voeg nu minimaal 2 taxonomies toe en koppel deze aan een of meerdere custom post types. Links . https://developer.wordpress.org/reference/functions/register_post_type/ https://developer.wordpress.org/reference/functions/register_taxonomy/ . ",
    "url": "/m9prog_opdrachtensite/les-7/taxonomy#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt",
    
    "relUrl": "/les-7/taxonomy#let-op-dat-je-de-juiste-term-en-text-domein-gebruikt"
  },"119": {
    "doc": "Les 7",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. Volgende stap: . In de volgende opdracht ga je deze taxonomy én post type weergeven op jouw site. Weergeven van een Custom post type . ",
    "url": "/m9prog_opdrachtensite/les-7/taxonomy#commit-en-push",
    
    "relUrl": "/les-7/taxonomy#commit-en-push"
  },"120": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-7/taxonomy",
    
    "relUrl": "/les-7/taxonomy"
  },"121": {
    "doc": "Les 1",
    "title": "Testen",
    "content": "Na de installatie kun je jouw website testen. 1- Controle website . Ga in je browser naar jouw website en bekijk jouw website. ",
    "url": "/m9prog_opdrachtensite/les-1/testen#testen",
    
    "relUrl": "/les-1/testen#testen"
  },"122": {
    "doc": "Les 1",
    "title": "Les 1",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-1/testen",
    
    "relUrl": "/les-1/testen"
  },"123": {
    "doc": "Les 7",
    "title": "Weergeven van custom post types",
    "content": "Uiteindelijk is het doel om deze items weer te geven aan de voorkant van je website. In het wp-admin gedeelte heb je alvast een paar items toegevoegd, deze kunnen wij nu gaan weergeven. Dit gaan wij op verschillende manieren doen: . | via het menu | via een widget | via de categorie | de pagina zelf | . 1- De post type toevoegen aan het menu . Dit is eigenlijk de makkelijkste omdat je hier geen code voor hoeft te schrijven. | ga in het admin menu naar het menu onderdeel toe. | selecteer aan de zijkant je custom post type | klik op view all en selecteer je post type | klik op ‘Add to Menu’ | Sla het menu op | Bekijk nu je website in je browser en zie dat je een nieuw menu item hebt. | . 2- De post type toevoegen aan een widget . In het wp-admin gedeelte kun je via de customizer of direct naar het widgets menu gaan. Hier kun je een tekst plaatsen met een link naar de slug van jouw custom post type, bij mij is dat \\wood. Gebruik hiervoor de link knop, of schrijf dit zelf in HTML. 3- Weergave van de categorie . Jouw custom post type is te bereiken door de slug als endpoint in de browser toe te voegen, in mijn geval: localhost/wood Om een mooi overzicht te krijgen maak ik hier ook een speciale archief pagina van door de index te dupliceren naar archive-wood.php ( bij jou is dat natuurlijk niet wood, maar jouw eigen post type ) In dit overzicht heb ik bijvoorbeeld de thumbnails weergegeven en een titel toegevoegd. Op dezelfde manier kunnen wij ook de categorie weergeven, nu alleen met de categorie in de titel. Ik kopieer nu de archive-wood.php naar taxonomy-origin.php Het enige dat ik voorlopig aanpas is de titel, daarvan maak ik: . &lt;h1&gt; Dit is mijn categorie: &lt;?php single_term_title() ?&gt; &lt;/h1&gt; . 4- Controleer . Als je nu naar jouw website gaat in de browser dan zie je dat je op verschillende manieren naar jouw custom post type kan gaan. Ook zie je dat je overzicht pagina’s hebt en verschillende enkele pagina’s. Het klopt dat er nu hier en daar duplicated code is, maar daar gaan wij een volgende stap mee aan de slag. ",
    "url": "/m9prog_opdrachtensite/les-7/view#weergeven-van-custom-post-types",
    
    "relUrl": "/les-7/view#weergeven-van-custom-post-types"
  },"124": {
    "doc": "Les 7",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m9prog_opdrachtensite/les-7/view#commit-en-push",
    
    "relUrl": "/les-7/view#commit-en-push"
  },"125": {
    "doc": "Les 7",
    "title": "Les 7",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-7/view",
    
    "relUrl": "/les-7/view"
  },"126": {
    "doc": "Les 6",
    "title": "Webpack integreren met WordPress",
    "content": "Deze les een stuk minder verschillende stappen, dus heb je meer tijd om een mooie website te maken. Om onze SASS en JavaScipt te compilen maak ik gebruik van npm in combinatie met webpack om de assets te renderen. ",
    "url": "/m9prog_opdrachtensite/les-6/webpack#webpack-integreren-met-wordpress",
    
    "relUrl": "/les-6/webpack#webpack-integreren-met-wordpress"
  },"127": {
    "doc": "Les 6",
    "title": "Let op, straks wordt er een node_modules folder gegenereerd, deze mag niet in git.",
    "content": ". 1- Structuur . Eerst heb je een structuur nodig. Maak in je thema map een aantal folders en bestanden die je als basis nodig hebt: . | src/js ( dit is de locatie van je javascripts die niet minified zijn ) | src/js/main.js ( dit is je js bestand met minimaal een console.log() functie erin ) | src/scss ( hierin staan je SASS bestanden ) | src/scss/main.scss ( je scss bestand met bijvoorbeeld je sass code ) | package.json ( hier staat in welke packages er nodig zijn zoals een sass compiler ) | webpack.config.js ( hier zijn de functies gedefinieerd voor het compilen van de sass ) Je kunt een voorbeeld van dit pakket bestanden ook hier downloaden: example | . 2- package.json . In de package.json kun je aangeven hoe je project heet en wat de locatie van webpack.config.js is. Je vind ook diverse dependencies die nodig zijn voor het compilen van dit project. Daarnaast zie je ook welke scripts er zijn en welke actie die uitvoeren, bijvoorbeeld dev . 3- webpack.config.js . In de webpack.config.js vind je de acties die uitgevoerd worden tijdens het compilen. 4- Packages installeren . Het installeren van de packages doe je via npm. Navigeer daarvoor in de terminal naar je thema folder en voer het volgende commando uit: . npm i . ( npm install ) Je ziet nu een node_modules folder in je thema folder. Note: Zorg ervoor dat je de node_modules in je .gitignore hebt staan zodat deze niet gepushed wordt naar je repo. 5- Packages compilen . Om de sass en de javascripts te compilen en in een dist folder te plaatsen kun je het volgende commando uitvoeren: . npm run dev . 6- Scripts toevoegen aan de website . Voor het laden van de javascripts en styles maak je binnen WordPress gebruik van een enqueue functie. Zie voor de scripts: https://developer.wordpress.org/reference/functions/wp_enqueue_script/ En voor de styles: https://developer.wordpress.org/reference/functions/wp_enqueue_style/ Hierdoor worden ook eventuele dependencies geladen en worden de scripts op de juiste plek geladen. Let even goed op welke parameters er zijn. Plaats daarvoor deze code in je functions.php: . function add_style_and_js() { wp_enqueue_script( 'm5prog', get_template_directory_uri() . '/dist/js/main.js', [ 'jquery' ], '1.0.0', [ 'strategy' =&gt; 'defer', 'in_footer' =&gt; true, ] ); wp_register_style( 'm5prog_styles', get_template_directory_uri() . '/dist/css/main.min.css', [], '1.0.0' ); wp_enqueue_style( 'm5prog_styles' ); } add_action( 'wp_enqueue_scripts', 'add_style_and_js' ); . 7- Thema opruimen . Omdat je nu gebruik maakt van de wp_enqueue_script en wp_enqueue_style hoef je de style en scripts niet meer los te laden in je header en footer. Mocht je dat nog wel doen dan moet je die regels verwijderen. 8- Controleer . Bekijk je website nu in de browser. 9- Customize . Pas nu de scss en templates nu aan zodat de website voldoet aan de eisen van jouw project. ",
    "url": "/m9prog_opdrachtensite/les-6/webpack#let-op-straks-wordt-er-een-node_modules-folder-gegenereerd-deze-mag-niet-in-git",
    
    "relUrl": "/les-6/webpack#let-op-straks-wordt-er-een-node_modules-folder-gegenereerd-deze-mag-niet-in-git"
  },"128": {
    "doc": "Les 6",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m9prog_opdrachtensite/les-6/webpack#commit-en-push",
    
    "relUrl": "/les-6/webpack#commit-en-push"
  },"129": {
    "doc": "Les 6",
    "title": "Les 6",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-6/webpack",
    
    "relUrl": "/les-6/webpack"
  },"130": {
    "doc": "Les 5",
    "title": "Wat zijn WordPress-widgets?",
    "content": "In WordPress kun je stukjes content maken die je buiten de artikelen en bijbehorende inhoud beheert, dit noemen wij widgets. Widgets kunnen diverse type informatie bevatten zoals statische HTML, navigatiegegevens of andere data die niet direct verbonden is aan de huidige pagina. In de meeste gevallen wordt een widget op elke pagina van je site weergegeven, maar je kan ook widget gebieden toevoegen voor specifieke pagina’s, zoals je homepagina. Om een widget aan je site toe te voegen, moet je deze koppelen aan een widget-gebied. 1- Widget ondersteuning toevoegen aan thema . Widget-gebieden kun je definiëren in het thema als je hier gebruik van wilt maken. In de functions.php ga ik aangeven dat mijn thema een widget gebied heeft zodat ik deze in het wp-admin gedeelte kan beheren. Dit doe je door in te haken op de widgets_init action van WordPress. ",
    "url": "/m9prog_opdrachtensite/les-5/widgets#wat-zijn-wordpress-widgets",
    
    "relUrl": "/les-5/widgets#wat-zijn-wordpress-widgets"
  },"131": {
    "doc": "Les 5",
    "title": "Let op dat je bij de id een duidelijke ‘key’ aanmaakt, bijvoorbeeld ‘footer-widget-area’.",
    "content": "/** * Initialize the widget area * * @return void */ function add_theme_widgets() { register_sidebar( [ 'name' =&gt; __( 'Footer Widget Area', 'Text_Domain' ), 'id' =&gt; 'referentie_id', 'description' =&gt; __( 'A widget area located in the footer.', 'Text_Domain' ), 'before_widget' =&gt; '&lt;div id=\"%1$s\" class=\"widget-container %2$s\"&gt;', 'after_widget' =&gt; '&lt;/div&gt;', 'before_title' =&gt; '&lt;h3 class=\"widget-title\"&gt;', 'after_title' =&gt; '&lt;/h3&gt;', ] ); } add_action( 'widgets_init', 'add_theme_widgets' ); . 2- Instellen van een widget . In het wp-admin gedeelte kun je onder ‘Appearance’ en dan het kopje widgets je widgets beheren. 3- Widget weergeven in de footer . Nu je een widget hebt ingesteld wil je hem natuurlijk ook weergeven aan de voorkant van je website. In het &lt;footer&gt; element ga ik een widget weergeven. Bekijk hier de configuratie opties: https://developer.wordpress.org/reference/functions/register_sidebar/ Dit is de code om een widget weer te geven, waarbij de parameter gelijk is aan de ID bij het registreren. &lt;?php if ( is_active_sidebar( 'ref-id' ) ) : ?&gt; &lt;?php dynamic_sidebar( 'ref-id' ); ?&gt; &lt;?php endif; ?&gt; . Je kunt natuurlijk ook meerdere gebieden aanmaken waarin je widgets verschijnen. Zo kun je eenvoudig de footer van je project beheren vanuit de wp-admin omgeving. 4- Controleer . Bekijk je website nu in de browser en zie dat je extra data in de content hebt. Je hebt ondertussen een basis thema gemaakt voor WordPress waarbij je diverse dynamische elementen hebt toegevoegd. In de volgende les ga je met de vormgeving aan de slag. ",
    "url": "/m9prog_opdrachtensite/les-5/widgets#let-op-dat-je-bij-de-id-een-duidelijke-key-aanmaakt-bijvoorbeeld-footer-widget-area",
    
    "relUrl": "/les-5/widgets#let-op-dat-je-bij-de-id-een-duidelijke-key-aanmaakt-bijvoorbeeld-footer-widget-area"
  },"132": {
    "doc": "Les 5",
    "title": "Commit en push",
    "content": "Commit en push ALTIJD na het maken van een opdracht of aan het einde van de les. Zo is je voortgang zichtbaar en ontvang je feedback en/of hulp op de laatste versie van je code als dat nodig is. ",
    "url": "/m9prog_opdrachtensite/les-5/widgets#commit-en-push",
    
    "relUrl": "/les-5/widgets#commit-en-push"
  },"133": {
    "doc": "Les 5",
    "title": "Les 5",
    "content": " ",
    "url": "/m9prog_opdrachtensite/les-5/widgets",
    
    "relUrl": "/les-5/widgets"
  }
}
